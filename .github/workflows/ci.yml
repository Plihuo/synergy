# All-in-one continuous integration (CI) workflow.
# Runs on all platforms (Windows, macOS, and Linux)
# for all events (pull request, release, and schedule).

name: CI

on:
  workflow_call:
    inputs:
      repository:
        type: string
        required: false
        description: "The repository check out. Defaults to the current repository."
      ref:
        type: string
        required: false
        description: "The ref to check out. Defaults to the current ref."
      cmake-args:
        type: string
        required: false
        description: "Additional CMake arguments to pass to the configure step."
      skip-tests:
        type: boolean
        required: false
        description: "Whether to skip running tests. Defaults to false."
      package-prefix:
        type: string
        required: false
        description: "The prefix to use for the package name."
      package-bin-zip:
        type: boolean
        required: false
        description: "Whether to only package the binaries in a zip file. Defaults to false."
  workflow_dispatch:
    inputs:
      test-release:
        description: "Test release"
        required: false
        default: false
        type: boolean
  push:
    branches:
      - master*
  release:
    types: [published]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  schedule:
    - cron: "0 5 * * *" # 5am UTC

env:
  QT_VERSION: 6.8.3
  GIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
  SYNERGY_PRODUCT_NAME: ${{ vars.SYNERGY_PRODUCT_NAME }}
  SYNERGY_EDITION_TYPE: ${{ vars.SYNERGY_EDITION_TYPE }}
  SYNERGY_PACKAGE_PREFIX: ${{ inputs.package-prefix || vars.SYNERGY_PACKAGE_PREFIX }}
  SYNERGY_ENABLE_ACTIVATION: ${{ vars.SYNERGY_ENABLE_ACTIVATION }}
  PACKAGE_BUILD: ${{ !github.event.pull_request.draft }}
  GIT_REPOSITORY: ${{ inputs.repository || github.repository }}
  GIT_REF: ${{ inputs.ref || github.ref }}

  # Used to determine the version number format (should simply use the contents of `VERSION` file).
  SYNERGY_VERSION_RELEASE: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test-release == 'true') }}

  # Used to determine the version number format (should set the stage part to "snapshot").
  SYNERGY_VERSION_SNAPSHOT: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test-release == 'false') }}

jobs:
  # Quality gate to allow PR merge, used in the branch protection rules.
  # Even though "ci-" seems redundant, it adds useful context in the GitHub UI.
  ci-passed:
    runs-on: ubuntu-latest
    needs: main

    steps:
      - run: echo "âœ… CI passed" > $GITHUB_STEP_SUMMARY

  main:
    if: ${{ !github.event.pull_request.draft }}
    name: main / ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.runs-on }}
    container: ${{ matrix.target.container }}
    timeout-minutes: 20

    strategy:
      # Normally, we want to fail fast, but in this case we shouldn't since one target may
      # fail due to transient issues unrelated to the build.
      fail-fast: false

      matrix:
        target:
          - name: windows-2022-x64
            runs-on: windows-latest-16-cores
            package-os: windows-x64

          - name: macos-14-arm64
            runs-on: macos-14
            package-os: macos-arm64

          - name: macos-14-x64
            runs-on: macos-14-large
            package-os: macos-x64

          - name: debian-13-x86_64
            runs-on: ubuntu-latest
            container: debian:trixie-slim

          - name: debian-12-x86_64
            runs-on: ubuntu-latest
            container: debian:bookworm-slim

          - name: ubuntu-25.04-x86_64
            runs-on: ubuntu-latest
            container: ubuntu:25.04

          - name: ubuntu-24.10-x86_64
            runs-on: ubuntu-latest
            container: ubuntu:24.10

          - name: ubuntu-24.04-x86_64
            runs-on: ubuntu-latest
            container: ubuntu:24.04

          - name: ubuntu-24.04-arm64
            runs-on: ubuntu-24.04-8-core-arm64
            container: ubuntu:24.04

          - name: ubuntu-22.04-x86_64
            runs-on: ubuntu-latest
            container: ubuntu:22.04

          - name: ubuntu-22.04-arm64
            runs-on: ubuntu-24.04-8-core-arm64
            container: ubuntu:22.04

          - name: fedora-42-arm64
            runs-on: ubuntu-24.04-8-core-arm64
            container: fedora:42

          - name: fedora-42-x86_64
            runs-on: ubuntu-latest
            container: fedora:42

          - name: fedora-41-x86_64
            runs-on: ubuntu-latest
            container: fedora:41

          - name: fedora-40-x86_84
            runs-on: ubuntu-latest
            container: fedora:40

          - name: opensuse-tumbleweed-x86_64
            runs-on: ubuntu-latest
            container: opensuse/tumbleweed:latest

          - name: arch-linux-x86_64
            runs-on: ubuntu-latest
            container: archlinux:latest

          - name: manjaro-x86_64
            runs-on: ubuntu-latest
            container: manjarolinux/base:latest

    steps:
      - name: Setup Linux
        if: ${{ runner.os == 'Linux' }}
        id: setup-linux
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          . /etc/os-release
          os=${ID_LIKE}
          if [ -z "$os" ]; then
            os=${ID}
          fi

          echo "Detected Linux: ${os}"
          case "${os}" in
            *debian*)
              # The default Ubuntu mirror is often flakey, so use the US mirror instead.
              if [[ "${{ matrix.target.name }}" == ubuntu* ]]; then
                # Sources were moved to `/etc/apt/sources.list.d/ubuntu.sources` in Ubuntu 24.10
                if [[ -f /etc/apt/sources.list.d/ubuntu.sources ]]; then
                  sources=/etc/apt/sources.list.d/ubuntu.sources
                else
                  sources=/etc/apt/sources.list
                fi
                sed -i 's|http://archive.ubuntu.com/ubuntu/|http://us.archive.ubuntu.com/ubuntu/|g' $sources
              fi
              
              apt update
              apt install -y git python3 python3-venv
              ;;

            *fedora*)
              dnf install -y git python3
              ;;

            *suse*)
              zypper refresh
              zypper --non-interactive --no-gpg-checks \
                install -y --force-resolution git python3
              ;;

            *arch*)
              pacman -Syu --noconfirm git python sudo
              useradd -m build
              echo "package-user=build" >> $GITHUB_OUTPUT
              ;;

            *)
              echo "Unsupported Linux: ${os}"
              exit 1
              ;;
          esac

      - name: Setup variables
        id: vars
        shell: bash
        run: |
          case "${{ runner.os }}" in
            "Windows")
              cmake_args="--preset=windows-release"
              ;;

            "macOS")
              cmake_args="$cmake_args --preset=macos-release"
              cmake_args="$cmake_args -DCMAKE_OSX_SYSROOT=/Applications/Xcode_15.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
              ;;

            "Linux")
              cmake_args="$cmake_args --preset=linux-release"
              if [ "${{ matrix.target.static-libportal }}" == "true" ]; then
                cmake_args="$cmake_args -DSYSTEM_LIBPORTAL=OFF -DSTATIC_LIBPORTAL=ON"
              fi
              ;;
          esac

          cmake_args="$cmake_args -DUSE_TOMLPLUSPLUS=OFF -DUSE_CLI11=OFF"
          cmake_args="$cmake_args -DSYNERGY_VERSION_CHECK=${{ vars.SYNERGY_VERSION_CHECK }}"
          cmake_args="$cmake_args ${{ inputs.cmake-args }}"

          echo "cmake-args=$cmake_args" >> $GITHUB_OUTPUT

      # By default, workspace dir is not trusted by Git on containers.
      - name: Setup Git (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GIT_REPOSITORY }}
          ref: ${{ env.GIT_REF }}
          fetch-depth: 0
          submodules: true

      # Only use caching for workflow calls, since in every other case the SHA will likely change.
      - name: Cache binaries
        if: ${{ inputs.ref }}
        uses: actions/cache@v4
        id: cache-bin
        with:
          path: dist
          key: ${{ matrix.target.name }}-bin-${{ inputs.ref }}

      - name: Install dependencies
        if: ${{ !steps.cache-bin.outputs.cache-hit }}
        id: get-deps
        uses: ./.github/actions/install-deps
        with:
          qt-version: ${{ env.QT_VERSION }}

      - name: Configure
        if: ${{ !steps.cache-bin.outputs.cache-hit }}
        run: cmake -B build ${{ steps.vars.outputs.cmake-args }} ${{ steps.get-deps.outputs.vcpkg-cmake-config }}

      - name: Build
        if: ${{ !steps.cache-bin.outputs.cache-hit }}
        run: cmake --build build -j8

      - name: Tests
        if: ${{ !steps.cache-bin.outputs.cache-hit && !inputs.skip-tests }}
        uses: ./.github/actions/run-tests
        timeout-minutes: 2
        with:
          job: ${{ matrix.target.name }}
          bin-dir: build/bin

      - name: Package (Linux)
        if: ${{ !steps.cache-bin.outputs.cache-hit && env.PACKAGE_BUILD && runner.os == 'Linux' && !inputs.package-bin-zip }}
        run: ./scripts/package.py
        env:
          LINUX_PACKAGE_USER: ${{ steps.setup-linux.outputs.package-user }}

      - name: Package (Windows)
        if: ${{ !steps.cache-bin.outputs.cache-hit && env.PACKAGE_BUILD && runner.os == 'Windows' && !inputs.package-bin-zip }}
        run: python ./scripts/package.py
        env:
          WINDOWS_PFX_CERTIFICATE: ${{ secrets.WINDOWS_PFX }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASS }}

      - name: Package (macOS)
        if: ${{ !steps.cache-bin.outputs.cache-hit && env.PACKAGE_BUILD && runner.os == 'macOS' && !inputs.package-bin-zip }}
        run: ./scripts/package.py
        env:
          APPLE_CODESIGN_ID: ${{ secrets.APPLE_CODESIGN_ID }}
          APPLE_P12_CERTIFICATE: ${{ secrets.APPLE_P12_CERTIFICATE }}
          APPLE_P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          APPLE_NOTARY_USER: ${{ secrets.APPLE_NOTARY_USER }}
          APPLE_NOTARY_PASSWORD: ${{ secrets.APPLE_NOTARY_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Package (bin zip)
        if: ${{ !steps.cache-bin.outputs.cache-hit && env.PACKAGE_BUILD && inputs.package-bin-zip }}
        uses: ./.github/actions/dist-copy-bin
        with:
          source-dir: build/bin
          target-dir: dist

      - name: Get version
        id: get-version
        uses: ./.github/actions/get-version

      - name: Upload to GitHub
        if: ${{ !steps.cache-bin.outputs.cache-hit && env.PACKAGE_BUILD }}
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ env.SYNERGY_PACKAGE_PREFIX }}-${{ steps.get-version.outputs.version }}-${{ matrix.target.name }}
          path: dist
          if-no-files-found: error

      - name: Upload to AWS S3
        uses: ./.github/actions/dist-upload
        if: ${{ always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'release') }}
        with:
          aws-s3-target-dir: ${{ vars.AWS_S3_UPLOAD_DIR }}
          aws-s3-package-version: ${{ steps.get-version.outputs.version }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
